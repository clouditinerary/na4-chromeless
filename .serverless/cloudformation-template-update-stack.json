{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "RunLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/chromeless-serverless-dev-run",
        "RetentionInDays": 7
      }
    },
    "VersionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/chromeless-serverless-dev-version",
        "RetentionInDays": 7
      }
    },
    "SessionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/chromeless-serverless-dev-session",
        "RetentionInDays": 7
      }
    },
    "DisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/chromeless-serverless-dev-disconnect",
        "RetentionInDays": 7
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "chromeless-serverless",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-run:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-version:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-session:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-disconnect:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-run:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-version:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-session:*:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/chromeless-serverless-dev-disconnect:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Connect",
                    "iot:Publish",
                    "iot:Subscribe",
                    "iot:Receive",
                    "iot:GetThingShadow",
                    "iot:UpdateThingShadow"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "-",
                        {
                          "Ref": "AWS::Region"
                        },
                        "-chromeless",
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "chromeless-serverless",
              "dev",
              "us-east-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "RunLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/chromeless-serverless/dev/1524574849340-2018-04-24T13:00:49.340Z/chromeless-serverless.zip"
        },
        "FunctionName": "chromeless-serverless-dev-run",
        "Handler": "src/run.default",
        "MemorySize": 1536,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "DEBUG": "*",
            "AWS_IOT_HOST": "af9ehu2s9stnl.iot.us-east-1.amazonaws.com",
            "CHROMELESS_S3_BUCKET_NAME": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::AccountId"
                  },
                  "-",
                  {
                    "Ref": "AWS::Region"
                  },
                  "-chromeless"
                ]
              ]
            },
            "CHROMELESS_S3_OBJECT_KEY_PREFIX": "",
            "CHROMELESS_S3_OBJECT_ACL": "public-read",
            "CHROMELESS_S3_BUCKET_URL": {
              "Fn::GetAtt": [
                "Bucket",
                "DomainName"
              ]
            }
          }
        }
      },
      "DependsOn": [
        "RunLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "RunLambdaVersionRxjTNGXcQPr4Ktx7PzySSOTPqKW1DKIU5RXvzp7k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RunLambdaFunction"
        },
        "CodeSha256": "f9/mn6dq/YojLe9bx69L1UQHIHAQuxijiAj/GsNYba8="
      }
    },
    "VersionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/chromeless-serverless/dev/1524574849340-2018-04-24T13:00:49.340Z/chromeless-serverless.zip"
        },
        "FunctionName": "chromeless-serverless-dev-version",
        "Handler": "src/version.default",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DEBUG": "*",
            "AWS_IOT_HOST": "af9ehu2s9stnl.iot.us-east-1.amazonaws.com"
          }
        }
      },
      "DependsOn": [
        "VersionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "VersionLambdaVersionjzjOBg00qC5NCVbvuN9Srthuk6CdyRPXA2Zn9pLwo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VersionLambdaFunction"
        },
        "CodeSha256": "f9/mn6dq/YojLe9bx69L1UQHIHAQuxijiAj/GsNYba8="
      }
    },
    "SessionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/chromeless-serverless/dev/1524574849340-2018-04-24T13:00:49.340Z/chromeless-serverless.zip"
        },
        "FunctionName": "chromeless-serverless-dev-session",
        "Handler": "src/session.default",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DEBUG": "*",
            "AWS_IOT_HOST": "af9ehu2s9stnl.iot.us-east-1.amazonaws.com"
          }
        }
      },
      "DependsOn": [
        "SessionLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SessionLambdaVersionOTOhUsuH5LMX4cYQMQs7yb7TZ04edcpFwIF3HCSCY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SessionLambdaFunction"
        },
        "CodeSha256": "f9/mn6dq/YojLe9bx69L1UQHIHAQuxijiAj/GsNYba8="
      }
    },
    "DisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/chromeless-serverless/dev/1524574849340-2018-04-24T13:00:49.340Z/chromeless-serverless.zip"
        },
        "FunctionName": "chromeless-serverless-dev-disconnect",
        "Handler": "src/disconnect.default",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DEBUG": "*",
            "AWS_IOT_HOST": "af9ehu2s9stnl.iot.us-east-1.amazonaws.com"
          }
        }
      },
      "DependsOn": [
        "DisconnectLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DisconnectLambdaVersionLJZBE3f9wft1ZTekK9tcrOeozq8Zf4KDV1Kr51rTI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectLambdaFunction"
        },
        "CodeSha256": "f9/mn6dq/YojLe9bx69L1UQHIHAQuxijiAj/GsNYba8="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-chromeless-serverless",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceVersion": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "version",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVersionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVersion"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VersionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "OPTIONS",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SessionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1524574851102": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodVersionGet",
        "ApiGatewayMethodOptions",
        "ApiGatewayMethodGet"
      ]
    },
    "ApiGatewayApiKey1": {
      "Type": "AWS::ApiGateway::ApiKey",
      "Properties": {
        "Enabled": true,
        "Name": "dev-chromeless-session-key",
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          }
        ]
      },
      "DependsOn": "ApiGatewayDeployment1524574851102"
    },
    "ApiGatewayUsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1524574851102",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan for chromeless-serverless dev stage",
        "UsagePlanName": "chromeless-serverless-dev"
      }
    },
    "ApiGatewayUsagePlanKey1": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "Properties": {
        "KeyId": {
          "Ref": "ApiGatewayApiKey1"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "ApiGatewayUsagePlan"
        }
      }
    },
    "VersionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VersionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SessionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SessionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RunIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "RuleDisabled": "false",
          "Sql": "SELECT * FROM 'chrome/new-session'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "RunLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "RunLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RunLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "RunIotTopicRule1"
              }
            ]
          ]
        }
      }
    },
    "DisconnectIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "RuleDisabled": "false",
          "Sql": "SELECT * FROM 'chrome/last-will'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "DisconnectLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "DisconnectLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "DisconnectIotTopicRule1"
              }
            ]
          ]
        }
      }
    },
    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::AccountId"
              },
              "-",
              {
                "Ref": "AWS::Region"
              },
              "-chromeless"
            ]
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 1,
              "Status": "Enabled"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "RunLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RunLambdaVersionRxjTNGXcQPr4Ktx7PzySSOTPqKW1DKIU5RXvzp7k"
      }
    },
    "VersionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VersionLambdaVersionjzjOBg00qC5NCVbvuN9Srthuk6CdyRPXA2Zn9pLwo"
      }
    },
    "SessionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SessionLambdaVersionOTOhUsuH5LMX4cYQMQs7yb7TZ04edcpFwIF3HCSCY"
      }
    },
    "DisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectLambdaVersionLJZBE3f9wft1ZTekK9tcrOeozq8Zf4KDV1Kr51rTI"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}